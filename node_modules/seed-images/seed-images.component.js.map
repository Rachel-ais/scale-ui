{"version":3,"file":"seed-images.component.js","sourceRoot":"","sources":["../src/app/seed-images/seed-images.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { HttpClient } from '@angular/common/http';\nimport { Message } from 'primeng/components/common/api';\nimport * as beautify from 'js-beautify';\nimport * as Clipboard from 'clipboard';\nimport * as _ from 'lodash';\n\nimport 'rxjs/add/operator/toPromise';\n\n@Component({\n    selector: 'seed-images',\n    template: `\n        <div class=\"seed-jobs\">\n            <div class=\"search\">\n                <p-autoComplete [(ngModel)]=\"jobQueryResult\" (completeMethod)=\"filterJobs($event)\" field=\"Name\"\n                                styleClass=\"search-input\" placeholder=\"Search Jobs\" [minLength]=\"0\"></p-autoComplete>\n                <div class=\"loader\" *ngIf=\"loading\">\n                    <svg version=\"1.1\" id=\"loader\" xmlns=\"http://www.w3.org/2000/svg\"\n                         xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"40px\" height=\"40px\"\n                         viewBox=\"0 0 50 50\" style=\"enable-background:new 0 0 50 50;\" xml:space=\"preserve\">\n                        <path fill=\"#000\" d=\"M43.935,25.145c0-10.318-8.364-18.683-18.683-18.683c-10.318,0-18.683,\n                                             8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615c8.072,0,\n                                             14.615,6.543,14.615,14.615H43.935z\">\n                            <animateTransform attributeType=\"xml\"\n                                              attributeName=\"transform\"\n                                              type=\"rotate\"\n                                              from=\"0 25 25\"\n                                              to=\"360 25 25\"\n                                              dur=\"0.6s\"\n                                              repeatCount=\"indefinite\"/>\n                        </path>\n                    </svg>\n                </div>\n            </div>\n            <div class=\"results\">\n                <h3>{{ jobs.length }} job<span *ngIf=\"jobs.length !== 1\">s</span> found</h3>\n                <p-dataGrid [value]=\"jobs\">\n                    <ng-template let-job pTemplate=\"item\">\n                        <div class=\"ui-g-12 ui-md-4\">\n                            <a (click)=\"showJobDetails(job)\">\n                                <p-panel [showHeader]=\"false\">\n                                    <div class=\"result-header\" [style]=\"getHeaderStyle(job.hsl)\">\n                                        <h3>{{ job.Title }}</h3>\n                                    </div>\n                                    <div class=\"result-content\">\n                                        <div class=\"job-description\">{{ job.Description }}</div>\n                                        <strong>Maintainer:</strong> {{ job.Maintainer }}<br />\n                                        <span *ngIf=\"job.MaintOrg\">\n                                        <strong>Organization:</strong> {{ job.MaintOrg }}\n                                    </span>\n                                    </div>\n                                </p-panel>\n                            </a>\n                        </div>\n                    </ng-template>\n                </p-dataGrid>\n                <p-dialog *ngIf=\"selectedJob\" [(visible)]=\"showDialog\" (onHide)=\"hideJobDetails()\" [responsive]=\"true\"\n                          [dismissableMask]=\"true\" [modal]=\"true\" width=\"auto\" positionTop=\"40\" class=\"job-details\">\n                    <p-header>\n                        {{ selectedJob.Title }}\n                        <p-dropdown [options]=\"jobVersions\" optionLabel=\"JobVersion\" [(ngModel)]=\"selectedJobVersion\"\n                                    (onChange)=\"updateImages()\" [showClear]=\"false\" [filter]=\"true\" [autoWidth]=\"false\">\n                        </p-dropdown>\n                        <button pButton class=\"ui-button-secondary\" icon=\"fa-cube\" pTooltip=\"Package version...\"\n                                (click)=\"choosePackage()\" *ngIf=\"!showPackageDropdown\"></button>\n                        <p-dropdown [options]=\"images\" optionLabel=\"PackageVersion\" [(ngModel)]=\"selectedImage\"\n                                    (onChange)=\"updateImageManifest()\" [showClear]=\"false\" *ngIf=\"showPackageDropdown\">\n                        </p-dropdown>\n                    </p-header>\n                    {{ selectedJob.Description }}\n                    <div class=\"header\">\n                        Manifest\n                        <button class=\"copy-btn ui-button-secondary\" pButton type=\"button\" icon=\"fa-copy\"\n                                pTooltip=\"Copy to clipboard\" tooltipPosition=\"left\" data-clipboard-target=\"#manifest\">\n                        </button>\n                    </div>\n                    <div class=\"code\">\n                        <pre id=\"manifest\"><code>{{ imageManifestDisplay }}</code></pre>\n                    </div>\n                    <p-footer *ngIf=\"environment.scale && imageManifest\">\n                        <button pButton type=\"button\" (click)=\"onImportClick()\" label=\"Import\" [icon]=\"importBtnIcon\"\n                                iconPos=\"right\"></button>\n                    </p-footer>\n                </p-dialog>\n            </div>\n        </div>\n        <p-growl [(value)]=\"msgs\"></p-growl>\n    `,\n    styles: [`\n        @keyframes spin {\n            to {\n                transform: rotate(1440deg);\n            }\n        }\n        .seed-jobs .search {\n            position: relative;\n            text-align: center;\n            width: 50%;\n            margin: 0 auto 15px auto;\n        }\n        ::ng-deep .seed-jobs .search-input {\n            width: 100%;\n        }\n        ::ng-deep .seed-jobs .ui-autocomplete-input {\n            width: 100%;\n        }\n        .seed-jobs .search .loader {\n            position: absolute;\n            top: 7px;\n            right: 20px;\n        }\n        .seed-jobs .search .loader svg path, .seed-jobs .search .loader svg rect {\n            fill: #FF6700;\n        }\n        ::ng-deep .seed-jobs .search .ui-inputtext {\n            font-size: 1.5em;\n        }\n        ::ng-deep .seed-jobs .search .ui-autocomplete-loader {\n            display: none;\n        }\n        .seed-jobs .results .result-header {\n            border-radius: 3px 3px 0 0;\n        }\n        .seed-jobs .results .result-header h3 {\n            text-align: center;\n            margin: 0;\n            padding: 7px 0;\n        }\n        .seed-jobs .results .result-content {\n            padding: 10px;\n            text-align: center;\n            min-height: 90px;\n        }\n        .seed-jobs .results .result-content .job-description {\n            text-overflow: ellipsis;\n            white-space: nowrap;\n            overflow: hidden;\n        }\n        .seed-jobs .job-details {\n            width: 33%;\n        }\n        .seed-jobs .job-details h2 {\n            font-size: 1.2em;\n        }\n        .seed-jobs .job-details .header {\n            position: relative;\n            margin: 12px 0 0 0;\n            padding: 6px;\n            background: #777;\n            color: #fff;\n        }\n        .seed-jobs .job-details .header button {\n            position: absolute;\n            top: 5px;\n            right: 4px;\n            padding: 0;\n            font-size: 0.8em;\n        }\n        .seed-jobs .job-details .code {\n            position: relative;\n            margin-top: -14px;\n        }\n        .seed-jobs .job-details .code pre {\n            width: 100%;\n            max-height: 300px;\n            overflow-x: hidden;\n            background: #efefef;\n            border: 1px solid #bbb;\n            font-size: 0.9em;\n        }\n        ::ng-deep .seed-jobs .results .ui-panel .ui-panel-content {\n            padding: 0;\n        }\n        ::ng-deep .seed-jobs .results .ui-panel:hover {\n            background: #48ACFF;\n            transition: background-color 0.5s;\n        }\n        ::ng-deep .seed-jobs .results .ui-dialog {\n            width: 50%;\n        }\n        ::ng-deep .seed-jobs .results .ui-dropdown {\n            font-size: 0.7em;\n            width: 150px;\n        }\n        ::ng-deep .seed-jobs .results .ui-button {\n            font-size: 0.7em;\n        }\n    `]\n})\nexport class SeedImagesComponent implements OnInit {\n    @Input() environment: any;\n    @Output() imageImport = new EventEmitter<any>();\n    jobs: any[] = [];\n    selectedJob: any;\n    jobQueryResult: any;\n    jobVersions: any[] = [];\n    selectedJobVersion: any;\n    images: any[] = [];\n    selectedImage: any;\n    imageManifest: any;\n    imageManifestDisplay: any;\n    loading: boolean;\n    showDialog = false;\n    importBtnIcon = 'fa-cloud-download';\n    clipboard = new Clipboard('.copy-btn');\n    msgs: Message[] = [];\n    showPackageDropdown = false;\n\n    constructor(\n        private http: HttpClient,\n        private domSanitizer: DomSanitizer\n    ) {}\n\n    private handleError(err: any, summary?: string): void {\n        let detail = '';\n        if (err.status === 0) {\n            detail = 'CORS error: Unable to access server';\n        } else {\n            detail = err.statusText && err.statusText.length > 0 ? err.statusText : 'Server error';\n        }\n        this.msgs = [];\n        this.msgs.push({severity: 'error', summary: summary || 'Error', detail: detail});\n        this.importBtnIcon = 'fa-cloud-download';\n        this.loading = false;\n    }\n\n    private formatData(data) {\n        data.forEach(d => {\n            d.hsl = this.colorByHashCode(d.Title);\n        });\n        this.jobs = data;\n    }\n\n    private getHashCode(str) {\n        let hash = 0;\n        if (str.length === 0) {\n            return hash;\n        }\n        for (let i = 0; i < str.length; i++) {\n            hash = str.charCodeAt(i) + ((hash << 5) - hash);\n            hash = hash & hash; // Convert to 32bit integer\n        }\n        return hash;\n    }\n\n    private intToHSL(int) {\n        let shortened = int % 360;\n        shortened = Math.ceil(shortened / 20) * 20;\n        shortened = shortened < 0 ? shortened + 360 : shortened;\n        return `hsl(${shortened}, 100%, 80%)`;\n    }\n\n    private colorByHashCode(value) {\n        return this.intToHSL(this.getHashCode(value));\n    }\n\n    getHeaderStyle(value): any {\n        return this.domSanitizer.bypassSecurityTrustStyle(`background-color: ${value}`);\n    }\n\n    getJobs(): Promise<any> {\n        this.loading = true;\n        return this.http.get(`${this.environment.siloUrl}/jobs`)\n            .toPromise()\n            .then(response => {\n                this.loading = false;\n                return Promise.resolve(response);\n            })\n            .catch(err => {\n                return Promise.reject(err);\n            });\n    }\n\n    searchJobs(query): Promise<any> {\n        this.loading = true;\n        return this.http.get(`${this.environment.siloUrl}/jobs/search/${query}`)\n            .toPromise()\n            .then(response => {\n                this.loading = false;\n                return Promise.resolve(response);\n            })\n            .catch(err => {\n                return Promise.reject(err);\n            });\n    }\n\n    getImageManifest(id): Promise<any> {\n        this.importBtnIcon = 'fa-spinner fa-spin';\n        return this.http.get(`${this.environment.siloUrl}/images/${id}/manifest`)\n            .toPromise()\n            .then(response => {\n                this.importBtnIcon = 'fa-cloud-download';\n                return Promise.resolve(response);\n            })\n            .catch(err => {\n                return Promise.reject(err);\n            });\n    }\n\n    filterJobs(event): void {\n        if (event.query) {\n            this.searchJobs(event.query).then(data => {\n                // data comes back as an object of objects instead of an array\n                // so convert it to an array\n                this.formatData(Object.values(data));\n            }).catch(err => {\n                this.handleError(err, 'Job Search Failed');\n            });\n        } else {\n            this.getJobs().then(data => {\n                this.formatData(data);\n            }).catch(err => {\n                this.handleError(err, 'Job Retrieval Failed');\n            });\n        }\n    }\n\n    updateImageManifest(): void {\n        this.getImageManifest(this.selectedImage.ID).then(data => {\n            this.imageManifest = data;\n            this.imageManifestDisplay = beautify(JSON.stringify(data));\n        }).catch(err => {\n            this.handleError(err, 'Manifest Retrieval Failed');\n        });\n    }\n\n    updateImages(): void {\n        this.images = _.orderBy(this.selectedJobVersion.Images, ['PackageVersion'], ['desc']);\n        this.selectedImage = this.images[0];\n        this.updateImageManifest();\n    }\n\n    showJobDetails(job): void {\n        this.selectedJob = job;\n        this.showDialog = true;\n        this.jobVersions = _.orderBy(job.JobVersions, ['JobVersion'], ['desc']);\n        this.selectedJobVersion = this.jobVersions[0];\n        this.updateImages();\n    }\n\n    hideJobDetails(): void {\n        this.selectedJob = null;\n        this.showPackageDropdown = false;\n    }\n\n    onImportClick(): void {\n        // emit with manifest json\n        this.imageImport.emit(this.imageManifest);\n        this.hideJobDetails();\n    }\n\n    choosePackage(): void {\n        this.showPackageDropdown = true;\n    }\n\n    ngOnInit() {\n        this.getJobs().then(data => {\n            this.formatData(data);\n        }).catch(err => {\n            this.handleError(err, 'Job Retrieval Failed');\n        });\n        this.clipboard.on('success', () => {\n            this.msgs = [{severity: 'success', summary: 'Success!', detail: 'Manifest JSON copied to clipboard.'}];\n        });\n    }\n}\n"]}